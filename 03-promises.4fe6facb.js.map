{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGiC,MAA3BC,EAAW,CACfC,MAAOC,SAASC,cAAc,qBAC9BC,KAAMF,SAASC,cAAc,oBAC7BE,OAAQH,SAASC,cAAc,sBAC/BG,IAAKJ,SAASC,cAAc,uBAC5BI,KAAML,SAASC,cAAc,UAgC/B,SAASK,EAAcC,EAAUR,GAC/B,OAAO,IAAIS,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEF,E,MAAUR,IAEpBW,EAAO,C,SAAEH,E,MAAUR,GAAQ,GAE5BA,EAAM,G,CAvCbD,EAASO,KAAKU,iBAAiB,UAAUC,IACvCA,EAAIC,iBAGoB,MAAlBC,EAAaC,OAAOrB,EAASC,MAAMqB,OACnClB,EAAOiB,OAAOrB,EAASI,KAAKkB,OAC5BjB,EAASgB,OAAOrB,EAASK,OAAOiB,OAGT,IAAxB,IAAIC,EAAI,EAAGA,EAAIlB,EAAQkB,IAAK,CAI/Bf,EAHiBe,EAAI,EACPH,EAAahB,EAAOmB,GAG/BC,MAAK,EAACf,SAAEA,EAAQR,MAAEA,MACjBwB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAqBlB,QAAiBR,MAAU,IAGnD2B,OAAM,EAACnB,SAAEA,EAAQR,MAAEA,MAClBwB,EAAA3B,GAAS4B,OAAOG,QACd,sBAAoBpB,QAAiBR,MAAU,G,CAKvDD,EAASO,KAAKuB,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Отримуємо посилання на елементи форми\nconst elements = {\n  delay: document.querySelector('input[name=delay]'),\n  step: document.querySelector('input[name=step]'),\n  amount: document.querySelector('input[name=amount]'),\n  btn: document.querySelector('button[type=submit]'),\n  form: document.querySelector('.form'),\n};\n\nelements.form.addEventListener('submit', evt => {\n  evt.preventDefault();\n\n  // Отримуємо введені значення\n  const firstDelay = Number(elements.delay.value);\n  const step = Number(elements.step.value);\n  const amount = Number(elements.amount.value);\n\n  // Створюємо проміси і обробляємо їх\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const delay = firstDelay + step * i;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.warning(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  // Очищаємо поля форми\n  elements.form.reset();\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$elements","delay","document","querySelector","step","amount","btn","form","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","firstDelay","Number","value","i","then","$parcel$interopDefault","Notify","success","catch","warning","reset"],"version":3,"file":"03-promises.4fe6facb.js.map"}